data
write.csv(data, 'C:/Users/User/Desktop/data.csv')
install_github("patnik/extRatum")
library(devtools)
install_github("patnik/extRatum")
install.packages("Rtools")
install_github("patnik/extRatum")
library(githubinstall)
install.packages("githubinstall")
githubinstall("extRatum")
library("githubinstall")
githubinstall("extRatum")
getwd()
devtools::install("C:/Users/User/Desktop/extRatum")
library(extRatum)
?extRatum::areal_calc
devtools::install_github("abresler/forbesListR")
library(forbesListR)
devtools::install_github("abresler/forbesListR")
remotes::install_github("maju116/platypus")
library(tidyverse)
library(platypus)
library(abind)
remotes::install_github("maju116/platypus")
library(platypus)
install.packages("keras")
library(platypus)
devtools::install("C:/Users/User/Desktop/extRatum")
remove.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
knitr::opts_chunk$set(echo = TRUE)
devtools::install("C:/Users/User/Desktop/extRatum")
devtools::install_github("patnik/extRatum")
extRatum::areal_calc()
?extRatum::areal_calc()
?extRatum::line_calc
?extRatum::point_calc
remove.packages("extRatum")
devtools::install_github("patnik/extRatum")
library(extRatum)
devtools::install("C:/Users/User/Desktop/extRatum")
remove.packages("rlang")
devtools::install_github("patnik/extRatum")
install.packages("devtools")
devtools::install_github("patnik/extRatum")
?extRatum::areal_calc
devtools::install_github("patnik/extRatum")
?extRatum::areal_calc()
remove.packages("extRatum")
devtools::install_github("patnik/extRatum")
library(extRatum)
?areal_calc
?line_calc
?point_calc
library(dlstats)
install.packages("dlstats")
library(dlstats)
cran_stats(extRatum, use_cache = TRUE)
cran_stats("extRatum", use_cache = TRUE)
cran_stats("CIM", use_cache = TRUE)
> citation('ggplot2')
citation('ggplot2')
citation('extRatum')
toBibtex(citation('extRatum'))
```{r, eval = FALSE}
# install.packages("devtools")
devtools::install_github("patnik/extRatum")
render()
citation('extRatum')
remove.packages("extRatum")
install.packages("extRatum")
sessionInfo()
library(extRatum)
sessionInfo()
cranlogs::cran_downloads("extRatum")
cranlogs::cran_downloads("extRatum", when = "last-month")
cranlogs::cran_downloads("CIM", when = "last-month")
citation("extRatum")
remove.packages("extRatum")
install.packages("extRatum")
citation("extRatum")
library(shiny)
ui <- fluidPage(
selectInput("xCol", "Please select an x variable", names(mtcars)),
selectInput("yCol", "Please select a y variable", names(mtcars)),
checkboxInput("line", "Show regression line?", value = TRUE),
plotOutput("plot")
)
server <- function(input, output, session) {
data <- reactive({mtcars[, c(input$xCol, input$yCol)]})
output$plot <- renderPlot({
plot(data())
if(input$line) {
model <- lm(get(input$yCol) ~ get(input$xCol), data=data())
abline(model)
}
})
}
shinyApp(ui, server)
mtcars
set.seed(0)
# Data
df <- data.frame("ID" = 1:500,"AREA" = replicate(500,sum(rexp(n=8,rate=0.1))))
df
# Generate the sampling probability somehow based upon the AREA values with smaller areas having higher sample probability::
prob_vector <- ??????
# Sampling:
s <- sample(df$ID, n=1, prob=prob_vector)
# Generate the sampling probability somehow based upon the AREA values with smaller areas having higher sample probability::
prob_vector <- ??????
# Sampling:
s <- sample(df$ID, n=1, prob=prob_vector)
library(ggplot2)
ggplot(df, aes(AREA)) +
geom_density()
ggplot(df, aes(log10(AREA))) +
geom_density()
ggplot(df, aes(sqrt(AREA))) +
geom_density()
library(httr)
#' and combining the results.
#'
#' @param filters    API filters. See the API documentations for
#'                   additional information.
#'
#' @param structure  Structure parameter. See the API documentations
#'                   for additional information.
#'
#' @return list      Comprehensive list of dictionaries containing all
#'                   the data for the given ``filter`` and ``structure`.`
get_paginated_data <- function (filters, structure) {
endpoint     <- "https://api.coronavirus.data.gov.uk/v1/data"
results      <- list()
current_page <- 1
repeat {
httr::GET(
url   = endpoint,
query = list(
filters   = paste(filters, collapse = ";"),
structure = jsonlite::toJSON(structure, auto_unbox = TRUE),
page      = current_page
),
timeout(10)
) -> response
# Handle errors:
if ( response$status_code >= 400 ) {
err_msg = httr::http_status(response)
stop(err_msg)
} else if ( response$status_code == 204 ) {
break
}
# Convert response from binary to JSON:
json_text <- content(response, "text")
dt        <- jsonlite::fromJSON(json_text)
results   <- rbind(results, dt$data)
if ( is.null( dt$pagination$`next` ) ){
break
}
current_page <- current_page + 1;
}
return(results)
}
# Create filters:
query_filters <- c(
# Code to get data on every Local Authority
"areaType=utla"
# Code to call cases from a specific Local Authority
#paste0("areaType = ltla ; areaName = ", Local_Authority)
)
# Create the structure as a list or a list of lists:
query_structure <- list(
date       = "date",
name       = "areaName",
code       = "areaCode",
cases      = "newCasesBySpecimenDate",
cumcases = "cumCasesBySpecimenDate",
cumcasesrate = "cumCasesBySpecimenDateRate",
deaths      = "newDeaths28DaysByPublishDate",
cumdeaths = "cumDeaths28DaysByPublishDate",
cumdeathsrate = "cumDeaths28DaysByPublishDateRate"
)
covid_19_cases <- get_paginated_data(query_filters, query_structure)
# Create the structure as a list or a list of lists:
query_structure <- list(
date       = "date",
name       = "areaName",
code       = "areaCode",
cases      = "capacityPillarOneTwoFour"
)
covid_19_cases <- get_paginated_data(query_filters, query_structure)
# Create filters:
query_filters <- c(
# Code to get data on every Local Authority
"areaType=region"
# Code to call cases from a specific Local Authority
#paste0("areaType = ltla ; areaName = ", Local_Authority)
)
# Create the structure as a list or a list of lists:
query_structure <- list(
date       = "date",
name       = "areaName",
code       = "areaCode",
cases      = "capacityPillarOneTwoFour"
)
covid_19_cases <- get_paginated_data(query_filters, query_structure)
covid_19_cases
library("readxl")
library(osrm)
install.packages("osrm")
library(osrm)
data("berlin")
force(apotheke.df)
View(apotheke.df)
nrow(apotheke.df)
# Travel time matrix
distA <- osrmTable(loc = apotheke.sf[1:5,])
distA$durations
nrow(apotheke.sf)
# Travel time matrix
distA <- osrmTable(loc = apotheke.sf)
distA$durations
?osrmTable
distA$sources
bks <- seq(from = 0, to = 14, by = 2)
bks
iso <- osrmIsochrone(loc = apotheke.sf[87,], returnclass="sf",
breaks = bks, res = 70)
iso$id
iso$geometry
iso
osm3 <- get_tiles(x = iso, crop = TRUE, zoom = 12)
cols <- hcl.colors(n = 7, palette = "Emrld", alpha = 0.75, rev = F)
plot_tiles(osm3)
mf_map(x = iso, var = "center", type = "choro",
breaks = bks, border = NA, pal = cols,
leg_pos = "topleft", leg_frame = T,
leg_title = "Isochrones\n(min)",
leg_title_cex = 1, leg_val_cex = .8,
add = TRUE)
library(mapsf)
install.packages("mapsf")
library(mapsf)
osm3 <- get_tiles(x = iso, crop = TRUE, zoom = 12)
mf_map(x = iso, var = "center", type = "choro",
breaks = bks, border = NA, pal = cols,
leg_pos = "topleft", leg_frame = T,
leg_title = "Isochrones\n(min)",
leg_title_cex = 1, leg_val_cex = .8,
add = TRUE)
?osrmIsochrone
library(tmap)
iso
tm_shape(iso) +
tm_polygons("max")
?osrmIsochrone
iso2 <- osrmIsochrone(loc = apotheke.sf[87,], returnclass="sf",
breaks = 2, res = 70)
iso2 <- osrmIsochrone(loc = apotheke.sf[87,], returnclass="sf",
breaks = seq(from = 0, to = 2, by = 2), res = 70, osrm.profile = "car")
iso2
data_raw <- apotheke.sf[1:2,]
data_raw
length(data_raw)
data_raw <- apotheke.sf[1:2,]
# create an empty list to store the plots
datalist <- list()
start.time <- Sys.time()
for(i in 1:length(data_raw)){
datalist[[i]] <- osrmIsochrone(loc = apotheke.sf[i,], returnclass="sf",
breaks = seq(from = 0, to = 2, by = 2), res = 70, osrm.profile = "car")
}
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
datalist
citation("extRatum")
citation("CIM")
install.packages('r5r')
library(r5r)
options(java.parameters = "-Xmx2G")
data_path <- system.file("extdata/poa", package = "r5r")
list.files(data_path)
poi <- fread(file.path(data_path, "poa_points_of_interest.csv"))
library(data.table)
poi <- fread(file.path(data_path, "poa_points_of_interest.csv"))
head(poi)
points <- fread(file.path(data_path, "poa_hexgrid.csv"))
points
points <- points[ c(sample(1:nrow(points), 10, replace=TRUE)), ]
head(points)
# Indicate the path where OSM and GTFS data are stored
r5r_core <- setup_r5(data_path = data_path, verbose = FALSE)
# Indicate the path where OSM and GTFS data are stored
r5r_core <- setup_r5(data_path = data_path, verbose = FALSE)
library(r5r)
options(java.parameters = "-Xmx2G")
data_path <- system.file("extdata/poa", package = "r5r")
list.files(data_path)
library(data.table)
poi <- fread(file.path(data_path, "poa_points_of_interest.csv"))
head(poi)
points <- fread(file.path(data_path, "poa_hexgrid.csv"))
points <- points[ c(sample(1:nrow(points), 10, replace=TRUE)), ]
head(points)
# Indicate the path where OSM and GTFS data are stored
r5r_core <- setup_r5(data_path = data_path, verbose = FALSE)
# Indicate the path where OSM and GTFS data are stored
r5r_core <- setup_r5(data_path = data_path, verbose = FALSE)
library(r5r)
options(java.parameters = "-Xmx2G")
data_path <- system.file("extdata/poa", package = "r5r")
list.files(data_path)
library(data.table)
poi <- fread(file.path(data_path, "poa_points_of_interest.csv"))
head(poi)
points <- fread(file.path(data_path, "poa_hexgrid.csv"))
points <- points[ c(sample(1:nrow(points), 10, replace=TRUE)), ]
head(points)
# Indicate the path where OSM and GTFS data are stored
r5r_core <- setup_r5(data_path = data_path, verbose = FALSE)
?travel_time_matrix
mode <- "WALK"
max_walk_dist <- 5000
max_trip_duration <- 120
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = points,
destinations = points,
mode = mode,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
head(ttm)
head(points)
nrow(points)
points <- fread(file.path(data_path, "poa_hexgrid.csv"))
nrow(points)
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = points,
destinations = points,
mode = mode,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
head(ttm)
# calculate a travel time matrix
ttm2 <- travel_time_matrix(r5r_core = r5r_core,
origins = points,
destinations = points,
mode = 'CAR',
max_trip_duration = max_trip_duration,
verbose = FALSE)
ttm2
max(ttm2$travel_time)
# calculate a travel time matrix
ttm2 <- travel_time_matrix(r5r_core = r5r_core,
origins = points,
destinations = points,
mode = 'TRANSIT',
max_trip_duration = max_trip_duration,
verbose = FALSE)
max(ttm2$travel_time)
library(osrm)
data("berlin")
nrow(apotheke.sf)
apotheke.sf
library(raster)
ff <- raster('C:/Users/User/Downloads/GHS_POP_E2015_GLOBE_R2019A_54009_1K_V1_0_18_3/GHS_POP_E2015_GLOBE_R2019A_54009_1K_V1_0_18_3.tif')
ff
centroid_coords <- rCentroid(patches, output = "geom")
?rasterToPoints
ff_points <- rasterToPoints(ff)
ff_points
nrow(ff_points)
write.csv(ff_points, 'C:/Users/User/Downloads/ff_points')
write.csv(ff_points, 'C:/Users/User/Downloads/ff_points.csv')
list.files(data_path)
data_path
getwd()
library(osmdata)
getbb('Madrid') +
opq() +
add_osm_feature('amenity', 'cinema')
q <- getbb('Madrid') +
opq() +
add_osm_feature('amenity', 'cinema')
osmdata::getbb('Madrid')
q <- osmdata::getbb('Madrid') +
opq() +
add_osm_feature('amenity', 'cinema')
head(available_features())
head(available_tags("amenity"))
available_features()
#building the query
q <- getbb("Madrid") %>%
opq() %>%
add_osm_feature("amenity", "cinema")
str(q) #query structure
cinema <- osmdata_sf(q)
cinema
q <- getbb("Liverpool") %>%
opq() %>%
add_osm_feature(key = "shop")
shops <- osmdata_sf(q)
shops$osm_points
q <- getbb("Madrid") %>%
opq() %>%
add_osm_feature(key = "shop")
shops <- osmdata_sf(q)
tm_shape(shops$osm_points) +
tm_dots()
library(tmap)
tm_shape(shops$osm_points) +
tm_dots()
tmap_mode("view")
tm_shape(shops$osm_points) +
tm_dots()
nrow(shops$osm_points)
start.time <- Sys.time()
q2 <- opq(bbox = c(-5.361328,41.674884,8.920898,51.453244)) %>%
add_osm_feature(key = "shop")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
shops2 <- osmdata_sf(q2)
start.time <- Sys.time()
shops2 <- osmdata_sf(q2)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
library(osmextract)
cycleways_england = oe_get(
"England",
quiet = FALSE,
query = "SELECT * FROM 'lines' WHERE highway = 'cycleway'"
)
cycleways_england = oe_get(
"England",
quiet = FALSE,
query = "SELECT * FROM 'lines' WHERE highway = 'cycleway'",
download_directory = 'C:/Users/User/Documents/R/win-library/4.0/r5r/extdata/testing'
)
plot(sf::st_geometry(cycleways_england))
nrow(cycleways_england)
osm_points = oe_get("Isle of Wight", layer = "points", stringsAsFactors = FALSE, quiet = TRUE,
query = "SELECT * FROM 'lines' WHERE amenity = 'shops'",
download_directory = 'C:/Users/User/Documents/R/win-library/4.0/r5r/extdata/testing')
osm_points = oe_get("Isle of Wight", layer = "points", stringsAsFactors = FALSE, quiet = TRUE,
query = "SELECT * FROM 'points' WHERE amenity = 'shops'",
download_directory = 'C:/Users/User/Documents/R/win-library/4.0/r5r/extdata/testing')
osm_points = oe_get("Isle of Wight", layer = "points", stringsAsFactors = FALSE, quiet = TRUE,
download_directory = 'C:/Users/User/Documents/R/win-library/4.0/r5r/extdata/testing')
osm_points
nrow(osm_points)
unique(osm_points$other_tags)
unique(osm_points$highway)
plot(sf::st_geometry(osm_points))
unique(osm_points$place)
unique(osm_points$address)
osm_points
st_write(osm_points, 'C:/Users/User/Documents/R/win-library/4.0/r5r/extdata/testing/osm_points.csv')
osm_points = oe_get("Isle of Wight",
query = "SELECT * FROM 'points' WHERE other_tags = 'amenity'",
stringsAsFactors = FALSE, quiet = TRUE,
download_directory = 'C:/Users/User/Documents/R/win-library/4.0/r5r/extdata/testing')
osm_points
library(osmdata)
q <- getbb("Spain") %>%
opq() %>%
add_osm_feature(key = "hospital")
shops <- osmdata_sf(q)
shops
head(available_features())
available_tags("amenity")
q <- getbb("Spain") %>%
opq() %>%
add_osm_feature("amenity", "cinema")
shops <- osmdata_sf(q)
shops
q <- getbb("Madrid") %>%
opq() %>%
add_osm_feature("amenity", "cinema")
q <- getbb("Madrid") %>%
opq() %>%
add_osm_feature("amenity", "hospital")
shops <- osmdata_sf(q)
library(tmap)
tmap_mode("view")
tm_shape(shops$osm_points) +
tm_dots()
shops
library(osmextract)
plot(st_geometry(geofabrik_zones))
library(sf)
plot(st_geometry(geofabrik_zones))
oe_match("US")
oe_match("United States")
oe_match("UK")
oe_match("United Kingdom")
library(sf)
tl3 <- st_read('OECD_TL3_shapefile/OECD_TL3_2020.shp')
getWindowsHandle()
getwd()
1
1
1+1
library(sf)
setwd("C:/Users/User/Desktop/other_web")
blogdown::new_site(theme = 'yihui/hugo-lithium')
